<h3>
    This is my sixth blog
</h3>
<p>This is my seventh week of web development class and in this week I am doing experiments related to Node JS</p>
Here is the link to experiments:
<a href="../story/index.htm?../experiments/week7/story7.txt">Week 7 : Node js Experiments</a>
<h3>Experiment Description</h3>
<ul>
    <li><b>Developer Info Using Node js</b></li>
    <p>
        In this experiment I have used Openshift instead of IIS server to host the Node experiments as Node is not supported by IIS. Here I have created a simple server which maintains the Developer information. From the front-end user can perform various operations like edit, remove, add new developer <b>(CRUD operations)</b>. For front end I have used Angular and for the server, I have used Node. We use various http commands like 'get','post' to retrive and post the data from server. Front end, Angular JS and Node as together represents nice example of MVC architecture.
    </p>
    <li><b>Login Service using Node</b></li>
    <p>
        In this experiment, I have continued with user profile as done in Angular experiments. But here, I am storing the user info on server so that it maintains the state till the server is on. In this experiment I have done the first step that is login. When user enters valid username and password, it goes back to the server and after doing validation he is able to login if the result match.
    </p>
    <li><b>Profile Edit using Node</b></li>
    <p>
        In this experiment, I have continued with user profile as done in Angular experiments. But here, I am storing the user info on server so that it maintains the state till the server is on. In this experiment, after logging in, the user is able to see his profile as well as edit the data. That data state is stored in server and maintained till the server is restarted.
    </p>
    <li><b>Uploading Profile Pic using node</b></li>
    <p>
        In this experiment, I have continued with user profile as done in Angular experiments. But here, I am storing the user info on server so that it maintains the state till the server is on. In this experiment, after logging in, the user is able to see his profile as well as edit the data. Here also user is able to upload his profile pic which is stored in server till it gets restarted.
    </p>
    <li><b>Add new user using Node</b></li>
    <p>
        In this experiment, I have continued with user profile as done in Angular experiments. But here, I am storing the user info on server so that it maintains the state till the server is on. In this experiment, I have provided a functionaloty of registering a new user. Here one can register himself as new user and use that credential to login.
    </p>
</ul>
